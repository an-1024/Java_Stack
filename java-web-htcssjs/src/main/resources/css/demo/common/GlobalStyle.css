/**
* CSS 中的注释和 html 不同，注释中的内容
* CSS 基本语法：
*   包含两个部分：
*   选择器：就是 html 中的标签
*   声明块：通过声明块来设置指定元素的样式：
*       声明是一个名值对结构，一个样式名对应一个样式值，名和值之间以:隔开，以;结尾
*   
*   选择器：可以是标签元素
*   
* 
**/

/*
*   标签元素选择器
*/
p {
    color: chartreuse;
    font-size: 60px;
}

/*
*   id 选择器：html标签中定义的id，id不能重复
*   语法：#id名称+{}
*/
#blue {
    color: blue;
}

/*
*   当场景中存在id重复的情况下，此时需要用到 html 标签中的另一个属性 class
*   class：这个属性的作用是为元素分组，对同属一组元素进行操作
*   语法：.class 名称+属性
*
*   一个 class 可以定义多个名字，然后使用空格分割。如：class="pink testA"
*   从对 class 的描述可知，class 与 id 相比，class 功能更加强大
*/
.pink {
    color: pink;
}

.testA {
    font-size: 70px;
}

/**
* 通配符：*，表示这个页面的所有标签都是 * 指定的样式，优先级低于前面指定配置
*/
* {
    color: red;
}

/**
*   样式的复合使用
*   场景说明：将 p 标签定义的字体设置为红色，将 div 修饰的字体变为黄色
**/
/**
*   交集选择器：和与的逻辑相同
*   标签元素名称.class名称
**/
span.red2 {
    color: red
}

div.red2 {
    color: yellow
}

p.red2 {
    color: black;
    font-size: 20px;
}

/*
*   并集选择器（分组选择器）：和或的逻辑相同
**/
span,
div {
    color: black;
    font-size: 40px;
}

/*
*   关系选择器
*   父元素：直接包含子元素的叫做父元素
*   子元素：直接被父元素包含的子元素
*   祖先元素：直接或间接包含后代元素的叫做祖先元素；一个元素的父元素也叫它的祖先元素
*   后代元素：直接或间接被祖先元素包含的元素叫后代元素；子元素也叫后代元素
*   兄弟元素：拥有相同父元素的元素是兄弟元素
*/

/**
* 子元素选择器
* 语法：父元素名称 > 子元素
**/
div>span.spanA {
    color: orange;
}

/**
* 后代元素选择器：
* 选中指定元素内的指定后代元素
* 语法：祖先 后代
**/
div span {
    color: yellow;
}

/**
*   指定父元素的中子元素的子元素
**/
div p span {
    color: aqua;
}

/**
* 兄弟选择器
* 选择下一个兄弟
*   语法：前一个+下一个
* 选择下边所有的兄弟
*   兄弟元素名称 ～ 兄弟元素名称
**/
span+span {
    font-size: 70px;
}

span~span {
    font-size: 70px;
}

/**
* 属性选择器
* 元素名称[属性名]：选择含有指定属性的元素
*   [属性名=属性值]：选择含有指定属性和属性值的元素
*   [属性名^=属性值]：选择属性值以指定值开头的元素
*   [属性名$=属性值]：选择属性值以指定值结尾的元素
*   [属性名*=属性值]：选择属性值中含有某值的元素
**/
span[class=abc] {
    color: bisque;
}

span[class*=abc] {
    color: blueviolet;
}

/**
* 伪类选择器：
* 此时虽然将第一列设置为了黑色，但是这是固定写死的，并不灵活
* 此时就需要用到伪类：表示元素状态的，比如这里的第一列
*   :first-child：第一个元素
*   :last-child：最后一个元素
*   :nth-child(3)：表示选中第几个元素，
*                   n表示全部选中；
*                   2n后者even：表示选中偶数位的元素
*                   2n+1 或者 odd：表示选中奇数位的元素
*   以上伪类是根据所有的子元素进行排序的
*   
*   :first-of-type
*   :last-of-type
*   :nth-of-type()
*   这几个伪类的功能和上述的类似，不同的是他们在同类元素中进行排序
*
*   :not()：否定伪类：把符合条件的元素去除
**/
ul>li.liFirst {
    color: black
}

ul>li:first-child {
    color: red;
}

ul>li:last-child {
    color: blue;
}

ul>li:nth-child(3) {
    color: blue;
}

ul>li:first-of-type {
    color: blue;
}

ul>li:not(:nth-child(1)){
    color: yellowgreen;
}